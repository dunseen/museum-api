name: Deploy to Oracle Cloud VPS

on:
  push:
    branches:
      - main

jobs:
  setup-ssh:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 146.235.33.144 >> ~/.ssh/known_hosts

      - name: Create `.env` File Locally in GitHub Actions
        run: |
          cat > .env <<EOT
          NODE_ENV=${{ vars.NODE_ENV }}
          APP_PORT=${{ vars.APP_PORT }}
          APP_NAME=${{ vars.APP_NAME }}
          API_PREFIX=${{ vars.API_PREFIX }}
          APP_FALLBACK_LANGUAGE=${{ vars.APP_FALLBACK_LANGUAGE }}
          APP_HEADER_LANGUAGE=${{ vars.APP_HEADER_LANGUAGE }}
          FRONTEND_DOMAIN=${{ vars.FRONTEND_DOMAIN }}
          BACKEND_DOMAIN=${{ vars.BACKEND_DOMAIN }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ vars.DATABASE_PORT }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          REDIS_HOST=${{ vars.REDIS_HOST }}
          REDIS_PORT=${{ vars.REDIS_PORT }}
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          FILE_DRIVER=${{ vars.FILE_DRIVER }}
          ACCESS_KEY_ID=${{ vars.ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}
          MAIL_HOST=${{ vars.MAIL_HOST }}
          MAIL_PORT=${{ vars.MAIL_PORT }}
          MAIL_USERNAME=${{ vars.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_IGNORE_TLS=${{ vars.MAIL_IGNORE_TLS }}
          MAIL_SECURE=${{ vars.MAIL_SECURE }}
          MAIL_REQUIRE_TLS=${{ vars.MAIL_REQUIRE_TLS }}
          MAIL_DEFAULT_EMAIL=${{ vars.MAIL_DEFAULT_EMAIL }}
          MAIL_DEFAULT_NAME=${{ vars.MAIL_DEFAULT_NAME }}
          MAIL_CLIENT_PORT=${{ vars.MAIL_CLIENT_PORT }}
          AUTH_JWT_SECRET=${{ secrets.AUTH_JWT_SECRET }}
          AUTH_JWT_TOKEN_EXPIRES_IN=${{ vars.AUTH_JWT_TOKEN_EXPIRES_IN }}
          AUTH_REFRESH_SECRET=${{ secrets.AUTH_REFRESH_SECRET }}
          AUTH_REFRESH_TOKEN_EXPIRES_IN=${{ vars.AUTH_REFRESH_TOKEN_EXPIRES_IN }}
          AUTH_FORGOT_SECRET=${{ secrets.AUTH_FORGOT_SECRET }}
          AUTH_FORGOT_TOKEN_EXPIRES_IN=${{ vars.AUTH_FORGOT_TOKEN_EXPIRES_IN }}
          AUTH_CONFIRM_EMAIL_SECRET=${{ secrets.AUTH_CONFIRM_EMAIL_SECRET }}
          AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN=${{ vars.AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN }}
          EOT

      - name: Copy `docker-compose.yaml` and `.env` to VPS
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.yaml ubuntu@146.235.33.144:/home/ubuntu/app/docker-compose.yaml
          scp -i ~/.ssh/id_rsa .env ubuntu@146.235.33.144:/home/ubuntu/app/.env

  build-and-push:
    needs: setup-ssh
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Enable Docker Access
        run: |
          sudo chmod 666 /var/run/docker.sock

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | sudo docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ secrets.GHCR_USERNAME }}/museum-api:latest
          sudo docker pull $IMAGE_NAME || true
          sudo docker build --cache-from=$IMAGE_NAME -t $IMAGE_NAME .
          sudo docker push $IMAGE_NAME

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@146.235.33.144 << 'EOF'
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
          docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/museum-api:latest
          cd /home/ubuntu/app
          docker compose stop api
          docker compose rm -f api
          docker compose up -d api
          EOF
