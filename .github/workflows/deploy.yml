name: Deploy to Oracle Cloud VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create `.env` File in GitHub Actions Runner
        run: |
          cat > .env <<EOT
          NODE_ENV=${{ vars.NODE_ENV }}
          APP_PORT=${{ vars.APP_PORT }}
          APP_NAME=${{ vars.APP_NAME }}
          API_PREFIX=${{ vars.API_PREFIX }}
          APP_FALLBACK_LANGUAGE=${{ vars.APP_FALLBACK_LANGUAGE }}
          APP_HEADER_LANGUAGE=${{ vars.APP_HEADER_LANGUAGE }}
          FRONTEND_DOMAIN=${{ vars.FRONTEND_DOMAIN }}
          BACKEND_DOMAIN=${{ vars.BACKEND_DOMAIN }}
          DATABASE_HOST=${{ vars.DATABASE_HOST }}
          DATABASE_PORT=${{ vars.DATABASE_PORT }}
          DATABASE_TYPE=${{ vars.DATABASE_TYPE }}
          DATABASE_USERNAME=${{ vars.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ vars.DATABASE_NAME }}
          REDIS_HOST=${{ vars.REDIS_HOST }}
          REDIS_PORT=${{ vars.REDIS_PORT }}
          MINIO_ENDPOINT=${{ vars.MINIO_ENDPOINT }}
          MINIO_PUBLIC_ENDPOINT=${{ vars.MINIO_PUBLIC_ENDPOINT }}
          MINIO_BUCKET=${{ vars.MINIO_BUCKET }}
          MINIO_WEB_PORT=${{ vars.MINIO_WEB_PORT }}
          MINIO_PORT=${{ vars.MINIO_PORT }}
          MINIO_SSL=${{ vars.MINIO_SSL }}
          MAX_FILE_SIZE=${{ vars.MAX_FILE_SIZE }}
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          MAIL_HOST=${{ vars.MAIL_HOST }}
          MAIL_PORT=${{ vars.MAIL_PORT }}
          MAIL_USERNAME=${{ vars.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_IGNORE_TLS=${{ vars.MAIL_IGNORE_TLS }}
          MAIL_SECURE=${{ vars.MAIL_SECURE }}
          MAIL_REQUIRE_TLS=${{ vars.MAIL_REQUIRE_TLS }}
          MAIL_DEFAULT_EMAIL=${{ vars.MAIL_DEFAULT_EMAIL }}
          MAIL_DEFAULT_NAME=${{ vars.MAIL_DEFAULT_NAME }}
          MAIL_CLIENT_PORT=${{ vars.MAIL_CLIENT_PORT }}
          AUTH_JWT_SECRET=${{ secrets.AUTH_JWT_SECRET }}
          AUTH_JWT_TOKEN_EXPIRES_IN=${{ vars.AUTH_JWT_TOKEN_EXPIRES_IN }}
          AUTH_REFRESH_SECRET=${{ secrets.AUTH_REFRESH_SECRET }}
          AUTH_REFRESH_TOKEN_EXPIRES_IN=${{ vars.AUTH_REFRESH_TOKEN_EXPIRES_IN }}
          AUTH_FORGOT_SECRET=${{ secrets.AUTH_FORGOT_SECRET }}
          AUTH_FORGOT_TOKEN_EXPIRES_IN=${{ vars.AUTH_FORGOT_TOKEN_EXPIRES_IN }}
          AUTH_CONFIRM_EMAIL_SECRET=${{ secrets.AUTH_CONFIRM_EMAIL_SECRET }}
          AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN=${{ vars.AUTH_CONFIRM_EMAIL_TOKEN_EXPIRES_IN }}
          EOT

      - name: Copy `.env` File to VPS
        run: |
          scp -i ~/.ssh/id_rsa .env ubuntu@${{ vars.VPS_HOST }}:/home/ubuntu/app/.env

      - name: Enable Docker Access
        run: |
          sudo chmod 666 /var/run/docker.sock

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD  }}" | sudo docker login -u "${{ secrets.DOCKER_HUB_USERNAME  }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Multi-Platform Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/museum-api:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/museum-api:latest
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Copy `docker-compose.yaml` to VPS
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.yaml ubuntu@${{ vars.VPS_HOST }}:/home/ubuntu/app/docker-compose.yaml

      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ vars.VPS_HOST }} << 'EOF'
          echo "${{ secrets.DOCKER_HUB_PASSWORD  }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME  }}" --password-stdin
          docker pull ${{ secrets.DOCKER_HUB_USERNAME  }}/museum-api:latest
          cd /home/ubuntu/app
          docker compose down
          docker compose up -d 
          EOF
